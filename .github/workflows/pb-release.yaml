name: BudLight (Release)
on:
  workflow_dispatch:
  pull_request: # runs `make pr`
    branches:
      - main
      - 'release/**'
  push:
    branches:
      - main
      - 'release/**'
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_REGION: us-east-1
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CMAKE_BUILD_TYPE: 'RelWithDebInfo'
  # DOCKER_HOST: 'unix:///run/user/1006/docker.sock'
  GITHUB_REPOSITORY: budlight
  LANG: 'C.UTF-8'
  LC_ALL: 'C.UTF-8'
  PROJECT: 'budlight'
  REGISTRY: '001978429989.dkr.ecr.us-east-1.amazonaws.com'

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    if: "!startsWith(github.event.head_commit.message, 'UPDATE: version')"
    # this `if` is needed so that version-bump doesn't fully retrigger a new GHA
    # because it'll add a commit with that header.  Furthermore, this needs to be
    # restricted so that ONLY PRS TO DEVELOP are triggered.  This file's header
    # isn't enough; GH considers develop as part of the event either way
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }} # On PR, this looks like: "refs/pull/:prNumber/merge"
        fetch-depth: 0
        token: ${{ secrets.SIMPLEROSE_CI_PAT }}

    # - name: Checkout submodules
    #   run: |
    #     # Authenticate for private submodules
    #     eval $(ssh-agent -s)
    #     ssh-add ~/.ssh/id_rsa
    #     # Download submodules
    #     git submodule update --init --recursive

    - name: Run PR Job
      id: run-pr-job
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        make pr -n
        make pr

    - name: Release
      id: run-release-job
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ${{ steps.Changelog.outputs.changelog }}
        draft: true
        prerelease: false

  cd-prod:
    name: CD (Staging/Prod)
    runs-on: ubuntu-latest
    needs: ci
    if: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/main' }}
    steps:

    - name: Checkout Repository
      id: checkout_repo
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }} # On PR, this looks like: "refs/pull/:prNumber/merge"
        fetch-depth: 0
        token: ${{ secrets.SIMPLEROSE_CI_PAT }}

    - name: Release
      id: run-release-job
      if: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/main' }}
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ${{ steps.Changelog.outputs.changelog }}
        draft: true
        prerelease: false

    - name: Development Deploy
      id: deploy_dev
      run: |
        make ci -n
        make cd -n
        make version-bump-minor -n

        make ci
        make cd
        make version-bump-minor

        git config --global user.name "Automated GHA Committer"
        git config --global user.email "ops+gha@simplerose.com"
        git add cicd/version.txt
        git commit -m "UPDATE: version $(cat cicd/version.txt)"
        git push

  alerts:
    name: Post Alerts
    runs-on: ubuntu-latest
    needs: [cd-prod]
    if: needs.cd.result != 'success'

    steps:
    - name: Alert Slack
      id: slack_alert
      uses: slackapi/slack-github-action@v1.24.0
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN_GITHUB_ACTIONS }}
      with:
        channel-id: 'CRZ822ES2' # this is for #devops
        payload: |
          {
            "text": "Budlight GHA Build Result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                }
              }
            ]
          }
